Source: https://de.wikipedia.org/wiki/Python_(Programmiersprache)
Content: Python ([ˈpʰaɪθn̩], [ˈpʰaɪθɑn], auf Deutsch auch [ˈpʰyːtɔn]) ist eine universelle, üblicherweise interpretierte, höhere
Programmiersprache. Sie hat den Anspruch, einen gut lesbaren, knappen Programmierstil zu fördern. So werden
beispielsweise Blöcke nicht durch geschweifte Klammern, sondern durch Einrückungen strukturiert.  Python unterstützt
mehrere Programmierparadigmen, z. B. die objektorientierte, die aspektorientierte und die funktionale Programmierung.
Ferner bietet es eine dynamische Typisierung. Wie viele dynamische Sprachen wird Python oft als Skriptsprache genutzt.
Die Sprache weist ein offenes, gemeinschaftsbasiertes Entwicklungsmodell auf, das durch die gemeinnützige Python
Software Foundation gestützt wird, die die Definition der Sprache in der Referenzumsetzung CPython pflegt. Python zählt
zu den Allzweck-Programmiersprachen.  Die Sprache wurde Anfang der 1990er Jahre von Guido van Rossum am Centrum Wiskunde
& Informatica in Amsterdam als Nachfolger für die Programmier-Lehrsprache ABC entwickelt und war ursprünglich für das
verteilte Betriebssystem Amoeba gedacht.  Der Name geht nicht, wie das Logo vermuten lässt, auf die gleichnamige
Schlangengattung Python zurück, sondern bezog sich ursprünglich auf die englische Komikergruppe Monty Python. In der
Dokumentation finden sich daher auch einige Anspielungen auf Sketche aus dem Flying Circus. Trotzdem etablierte sich die
Assoziation zur Schlange, was sich unter anderem in der Programmiersprache Cobra sowie dem Python-Toolkit „Boa“ äußert.
Die erste Vollversion erschien im Januar 1994 unter der Bezeichnung Python 1.0. Gegenüber früheren Versionen wurden
einige Konzepte der funktionalen Programmierung implementiert, die allerdings später wieder aufgegeben wurden. Von 1995
bis 2000 erschienen neue Versionen, die fortlaufend als Python 1.1, 1.2 etc. bezeichnet wurden.  Python 2.0 erschien am
16. Oktober 2000. Neue Funktionen umfassten eine voll funktionsfähige Garbage Collection (automatische
Speicherbereinigung) und die Unterstützung für den Unicode-Zeichensatz.  Python 3.0 (auch Python 3000) erschien am
3. Dezember 2008 nach längerer Entwicklungszeit. Es beinhaltete einige tiefgreifende Änderungen an der Sprache, etwa das
Entfernen von Redundanzen bei Befehlssätzen und veralteten Konstrukten. Da Python 3.0 hierdurch teilweise inkompatibel
zu früheren Versionen wurde, beschloss die Python Software Foundation, Python 2.7 parallel zu Python 3 bis Ende 2019
weiter mit neuen Versionen zu unterstützen (für Hinweise zur letzten 2er-Version, zum Support-Ende und zur Migration
siehe Abschnitt Ende von Python 2).  Python wurde mit dem Ziel größter Einfachheit und Übersichtlichkeit entworfen. Dies
wird vor allem durch zwei Maßnahmen erreicht. Zum einen kommt die Sprache mit relativ wenigen Schlüsselwörtern aus. Zum
anderen ist die Syntax reduziert und auf Übersichtlichkeit optimiert. Dadurch lassen sich Python-basierte Skripte
deutlich knapper formulieren als in anderen Sprachen.  Van Rossum legte bei der Entwicklung großen Wert auf eine
Standardbibliothek, die überschaubar und leicht erweiterbar ist. Dies war Ergebnis seiner schlechten Erfahrung mit der
Sprache ABC, in der das Gegenteil der Fall ist. Dieses Konzept ermöglicht, in Python Module aufzurufen, die in anderen
Programmiersprachen geschrieben wurden, etwa um Schwächen von Python auszugleichen. Beispielsweise können für
zeitkritische Teile in maschinennäheren Sprachen wie C implementierte Routinen aufgerufen werden. Umgekehrt lassen sich
mit Python Module und Plug-ins für andere Programme schreiben, die die entsprechende Unterstützung bieten. Dies ist
unter anderem bei Blender, Cinema 4D, GIMP, Maya, OpenOffice bzw. LibreOffice, PyMOL, SPSS, QGIS oder KiCad der Fall.
Python ist eine Multiparadigmensprache. Das bedeutet, Python zwingt den Programmierer nicht zu einem einzigen
Programmierstil, sondern erlaubt, das für die jeweilige Aufgabe am besten geeignete Paradigma zu wählen.
Objektorientierte und strukturierte Programmierung werden vollständig unterstützt, funktionale und aspektorientierte
Programmierung werden durch einzelne Elemente der Sprache unterstützt. Die Freigabe nicht mehr benutzter
Speicherbereiche erfolgt durch Referenzzählung. Datentypen werden dynamisch verwaltet, eine automatische statische
Typprüfung wie z. B. bei C++ gibt es nicht. Jedoch unterstützt Python ab Version 3.5 optionale Typ-Annotationen, um eine
statische Typprüfung mithilfe externer Software, wie zum Beispiel Mypy, zu vereinfachen.  Python besitzt eine größere
Anzahl von grundlegenden Datentypen. Neben der herkömmlichen Arithmetik unterstützt es transparent auch beliebig große
Ganzzahlen und komplexe Zahlen.  Die üblichen Zeichenkettenoperationen werden unterstützt. Zeichenketten sind in Python
allerdings unveränderliche Objekte (wie auch in Java). Daher geben Operationen, die eine Zeichenkette verändern sollen –
wie z. B. durch Ersetzen von Zeichen – immer eine neue Zeichenkette zurück.  In Python ist alles ein Objekt: Klassen,
Typen, Methoden, Module etc. Der Datentyp ist jeweils an das Objekt (den Wert) gebunden und nicht an eine Variable,
d. h. Datentypen werden dynamisch vergeben, so wie bei Smalltalk oder Lisp – und nicht wie bei Java.  Trotz der
dynamischen Typverwaltung enthält Python eine gewisse Typprüfung. Diese ist strenger als bei Perl, aber weniger strikt
als etwa bei Objective CAML. Implizite Umwandlungen nach dem Duck-Typing-Prinzip sind unter anderem für numerische Typen
definiert, sodass man beispielsweise eine komplexe Zahl mit einer langen Ganzzahl ohne explizite Typumwandlung
multiplizieren kann.  Mit dem Format-Operator % gibt es eine implizite Umwandlung eines Objekts in eine Zeichenkette.
Der Operator == überprüft zwei Objekte auf (Wert-)Gleichheit. Der Operator is überprüft die tatsächliche Identität
zweier Objekte.  Python besitzt mehrere Sammeltypen, darunter Listen, Tupel, Mengen (Sets) und assoziative Arrays
(Dictionaries). Listen, Tupel und Zeichenketten sind Folgen (Sequenzen, Felder) und kennen fast alle die gleichen
Methoden: Über die Zeichen einer Kette kann man ebenso iterieren wie über die Elemente einer Liste. Außerdem gibt es die
unveränderlichen Objekte, die nach ihrer Erzeugung nicht mehr geändert werden können. Listen sind z. B. erweiterbare
Felder, wohingegen Tupel und Zeichenketten eine feste Länge haben und unveränderlich sind.  Der Zweck solcher
Unveränderlichkeit hängt z. B. mit den Dictionaries zusammen, einem Datentyp, der auch als assoziatives Array bezeichnet
wird. Um die Datenkonsistenz zu sichern, müssen die Schlüssel eines Dictionary vom Typ „unveränderlich“ sein. Die ins
Dictionary eingetragenen Werte können dagegen von beliebigem Typ sein.  Sets sind Mengen von Objekten und in CPython ab
Version 2.4 im Standardsprachumfang enthalten. Diese Datenstruktur kann beliebige (paarweise unterschiedliche) Objekte
aufnehmen und stellt Mengenoperationen wie beispielsweise Durchschnitt, Differenz und Vereinigung zur Verfügung.  Das
Typsystem von Python ist auf das Klassensystem abgestimmt. Obwohl die eingebauten Datentypen genau genommen keine
Klassen sind, können Klassen von einem Typ erben. So kann man die Eigenschaften von Zeichenketten oder Wörterbüchern
erweitern – auch von Ganzzahlen. Python unterstützt Mehrfachvererbung.  Die Sprache unterstützt direkt den Umgang mit
Typen und Klassen. Typen können ausgelesen (ermittelt) und verglichen werden und verhalten sich wie Objekte –
tatsächlich sind die Typen (wie in Smalltalk) selbst ein Objekt. Die Attribute eines Objektes können als Wörterbuch
extrahiert werden.  Eines der Entwurfsziele für Python war die gute Lesbarkeit des Quellcodes. Die Anweisungen benutzen
häufig englische Schlüsselwörter, wo andere Sprachen Symbole einsetzen (z. B. or statt ||). Für strukturierte
Programmierung besitzt Python die folgenden Elemente:  Im Gegensatz zu vielen anderen Sprachen können for- und while-
Schleifen einen else-Zweig haben. Dieser wird nur ausgeführt, wenn die Schleife vollständig durchlaufen und nicht
mittels break, return oder einer Ausnahme abgebrochen wurde.  Python benutzt wie Miranda und Haskell Einrückungen als
Strukturierungselement. Diese Idee wurde erstmals von Peter J. Landin vorgeschlagen und von ihm off-side rule
(„Abseitsregel“) genannt. In den meisten anderen Programmiersprachen werden Blöcke durch Klammern oder Schlüsselwörter
markiert, während unterschiedlich große Leerräume außerhalb von Zeichenketten keine spezielle Semantik tragen. Bei
diesen Sprachen ist die Einrückung zur optischen Hervorhebung eines Blockes zwar erlaubt und in der Regel auch
erwünscht, aber nicht vorgeschrieben. Für Programmierneulinge wird der Zwang zu lesbarem Stil aber als Vorteil gesehen.
Hierzu als Beispiel die Berechnung der Fakultät einer Ganzzahl, einmal in C und einmal in Python:  Fakultätsfunktion in
C:  Die gleiche Funktion in Python:  Es ist jedoch darauf zu achten, die Einrückungen im gesamten Programmtext gleich zu
gestalten. Die gemischte Verwendung von Leerzeichen und Tabulatorzeichen kann zu Problemen führen, da der Python-
Interpreter Tabulatoren im Abstand von acht Leerzeichen annimmt. Je nach Konfiguration des Editors können Tabulatoren
optisch mit weniger als acht Leerzeichen dargestellt werden, was zu Syntaxfehlern oder ungewollter
Programmstrukturierung führen kann. Als vorbeugende Maßnahme kann man den Editor Tabulatorzeichen durch eine feste
Anzahl von Leerzeichen ersetzen lassen. Die Python-Distribution enthält in der Standardbibliothek das Modul tabnanny,
welches die Vermischung von Tabulator- und Leerzeichen zu erkennen und beheben hilft.  Man kann die Fakultätsfunktion
aber auch wie in C einzeilig mit ternärem Operator formulieren:  Die Fakultätsfunktion in C:  Die Fakultätsfunktion in
Python:  Coconut und andere Erweiterungen erleichtern das funktionale Programmieren in Python. Darüber hinaus lässt sich
dies auch mit dem herkömmlichen Python realisieren:  Ausdrucksstarke syntaktische Elemente zur funktionalen
Programmierung vereinfachen das Arbeiten mit Listen und anderen Sammeltypen. Eine solche Vereinfachung ist die
Listennotation, die aus der funktionalen Programmiersprache Haskell stammt; hier bei der Berechnung der ersten fünf
Zweierpotenzen:  Weil in Python Funktionen als Argumente auftreten dürfen, kann man auch ausgeklügeltere Konstruktionen
ausdrücken, wie den Continuation-Passing Style.  Pythons Schlüsselwort lambda könnte manche Anhänger der funktionalen
Programmierung fehlleiten. Solche lambda-Blöcke in Python können nur Ausdrücke enthalten, aber keine Anweisungen. Damit
werden solche Anweisungen generell nicht verwendet, um eine Funktion zurückzugeben. Die übliche Vorgehensweise ist
stattdessen, den Namen einer lokalen Funktion zurückzugeben. Das folgende Beispiel zeigt dies anhand einer einfachen
Funktion nach den Ideen von Haskell Brooks Curry:  Damit ist auch Currying auf einfache Art möglich, um generische
Funktionsobjekte auf problemspezifische herunterzubrechen. Hier ein einfaches Beispiel:  Wird die curry-Funktion
aufgerufen, erwartet diese eine Funktion mit zwei notwendigen Parametern sowie die Parameterbelegung für den zweiten
Parameter dieser Funktion. Der Rückgabewert von curry ist eine Funktion, die das Gleiche tut wie func, aber nur noch
einen Parameter benötigt.  Closures sind mit den o. g. Mechanismen in Python ebenfalls einfach möglich. Ein simples
Beispiel für einen Stack, intern durch eine Liste repräsentiert:  Auf diese Weise erhält man die drei Funktionsobjekte
pop, push, is_empty, um den Stack zu modifizieren bzw. auf enthaltene Elemente zu prüfen, ohne dabei auf l direkt
zuzugreifen.  Python nutzt ausgiebig die Ausnahmebehandlung (englisch exception handling) als ein Mittel, um
Fehlerbedingungen zu testen. Dies ist so weit in Python integriert, dass es teilweise sogar möglich ist, Syntaxfehler
abzufangen und zur Laufzeit zu behandeln.  Ausnahmen haben einige Vorteile gegenüber anderen beim Programmieren üblichen
Verfahren der Fehlerbehandlung (wie z. B. Fehler-Rückgabewerte und globale Statusvariablen). Sie sind Thread-sicher und
können leicht bis in die höchste Programmebene weitergegeben oder an einer beliebigen anderen Ebene der
Funktionsaufruffolge behandelt werden. Der korrekte Einsatz von Ausnahmebehandlungen beim Zugriff auf dynamische
Ressourcen erleichtert es zudem, bestimmte auf Race Conditions basierende Sicherheitslücken zu vermeiden, die entstehen
können, wenn Zugriffe auf bereits veralteten Statusabfragen basieren.  Der Python-Ansatz legt den Einsatz von Ausnahmen
nahe, wann immer eine Fehlerbedingung entstehen könnte. Nützlich ist dieses Prinzip beispielsweise bei der Konstruktion
robuster Eingabeaufforderungen:  Dieses Programmstück fragt den Benutzer so lange nach einer Zahl, bis dieser eine
Zeichenfolge eingibt, die sich per int() in eine Ganzzahl konvertieren lässt. Durch die Ausnahmebehandlung wird hier
vermieden, dass eine Fehleingabe zu einem Laufzeitfehler führt, der das Programm zum Abbruch zwingt.  Ebenso kann auch
das hier nicht berücksichtigte Interrupt-Signal (SIGINT, häufig Strg+C) mittels Ausnahmebehandlung in Python abgefangen
und behandelt werden (except KeyboardInterrupt: …).  Die mächtige Standardbibliothek ist eine der größten Stärken von
Python, wodurch es sich für viele Anwendungen eignet. Der überwiegende Teil davon ist plattformunabhängig, so dass auch
größere Python-Programme oft auf Unix, Windows, macOS und anderen Plattformen ohne Änderung laufen. Die Module der
Standardbibliothek können mit in C oder Python selbst geschriebenen Modulen ergänzt werden.  Die Standardbibliothek ist
besonders auf Internetanwendungen zugeschnitten, mit der Unterstützung einer großen Anzahl von Standardformaten und
-protokollen (wie MIME und HTTP). Module zur Schaffung grafischer Benutzeroberflächen, zur Verbindung mit relationalen
Datenbanken und zur Manipulation regulärer Ausdrücke sind ebenfalls enthalten.  Mit Hilfe des mitgelieferten Moduls
Tkinter kann in Python (wie in Perl und Tcl) schnell eine grafische Benutzeroberfläche (GUI) mit Tk erzeugt werden. Es
gibt darüber hinaus eine Vielzahl von weiteren Wrappern von anderen Anbietern. Sie stellen Anbindungen (englisch
language bindings) zu GUI-Toolkits wie z. B. PyGTK, PyQt, wxPython, PyObjC und PyFLTK zur Verfügung.  Neben Tkinter wird
auch ein Modul zum Zeichnen von Turtle-Grafiken mitgeliefert.  Als nicht triviales Beispiel sei hier der kompakte
Sortieralgorithmus Quicksort angegeben:  Hier ermöglicht insbesondere die Listennotation für die Variablen links und
rechts eine kompakte Darstellung. Zum Vergleich eine iterative Formulierung dieser zwei Zeilen:  Dies ist nur ein
Beispiel für die gesparte Schreibarbeit durch die Listennotation. Tatsächlich ist in diesem Fall die iterative
Formulierung die schnellere, da pro Durchgang nur einmal über das Feld „liste“ iteriert wird und nicht zweimal wie in
der Listennotation.  So wie Lisp, Ruby, Groovy und Perl unterstützt der Python-Interpreter auch einen interaktiven
Modus, in dem Ausdrücke am Terminal eingegeben und die Ergebnisse sofort betrachtet werden können. Das ist nicht nur für
Neulinge angenehm, die die Sprache lernen, sondern auch für erfahrene Programmierer: Code-Stückchen können interaktiv
ausgiebig getestet werden, bevor man sie in ein geeignetes Programm aufnimmt.  Darüber hinaus steht mit Python Shell ein
Kommandozeileninterpreter für verschiedene unixoide Computer-Betriebssysteme zur Verfügung, der neben klassischen Unix-
Shellkommandos auch direkte Eingaben in Python-Form verarbeiten kann. IPython ist eine populäre interaktive Python-Shell
mit stark erweiterter Funktionalität.  CPython ist die offizielle oder Referenzimplementierung der Programmiersprache
Python und deren Interpreter.  Daneben gibt es einen in Java implementierten Python-Interpreter namens Jython, mit dem
die Bibliothek der Java-Laufzeitumgebung für Python verfügbar gemacht wird.  Außer den oben genannten Interpretern
existieren Compiler, die Python-Code in eine andere Programmiersprache übersetzen.  Mit Cython kann Python-Code in
effiziente C-Erweiterungen übersetzt oder externer C++- oder C-Code angebunden werden.  Ebenso existiert der Compiler
IronPython für die .Net-Framework- bzw. Mono-Plattform.  Um Python als Skriptsprache für Programme in C++ zu nutzen,
werden zumeist die Boost-Python-Bibliothek oder (in neueren Projekten) Cython verwendet.  Ein Python-Parser für Parrot
und ein in Python geschriebener Just-in-time-Compiler für Python, PyPy, welcher von der EU gefördert wurde, sind
ebenfalls in Entwicklung.  Auch die Python-Variante Pyston verwendet Just-in-time-Compilierung und beschleunigt so die
Ausführung von Python-Programmen.  Außerdem existiert ein Python-Interpreter für Mikrocontroller namens MicroPython.
Neben IDLE, das oft mit Python installiert wird und hauptsächlich aus einer Textumgebung und einer Shell besteht, wurden
auch einige vollwertige Entwicklungsumgebungen (IDEs) für Python entwickelt, beispielsweise Eric Python IDE, Spyder oder
PyCharm. Weiterhin gibt es Plug-ins für größere IDEs wie Eclipse, Visual Studio, IntelliJ IDEA und NetBeans.
Texteditoren für Programmierer wie Vim und Emacs lassen sich auch für Python anpassen: Ein einfacher Python-Mode ist
bereits integriert, und komfortablere Erweiterungen können hinzugefügt werden.  Für die verschiedenen GUI-Toolkits, wie
z. B. Tkinter (GUI-Builder), WxPython (wxGlade), PyQt (Qt Designer), PySide, PyGTK (Glade), Kivy oder PyFLTK gibt es
teils eigene Editoren, mit denen sich grafische Benutzeroberflächen auf vergleichsweise einfache Art aufbauen lassen.
Python unterstützt die Erstellung von Paketen; dabei helfen distutils und setuptools. Die Pakete werden auf PyPI, dem
Python Package Index, gespeichert und von dort zur Installation abgerufen. Als Paketmanager wird üblicherweise pip oder
auf alten Systemen auch easy_install eingesetzt. Paketversionen der Anaconda (Python-Distribution) werden von der
Paketverwaltung conda verwaltet.  Python ist für die meisten gängigen Betriebssysteme frei erhältlich und bei den
meisten Linux-Distributionen im Standardumfang enthalten. Um Python in Webserver einzubinden, wird Webserver-umgreifend
WSGI verwendet, welches die Nachteile von CGI umgeht. WSGI stellt eine universelle Schnittstelle zwischen Webserver und
Python(-Framework) zur Verfügung.  Eine Reihe von Web-Application-Frameworks nutzt Python, darunter Django, Pylons,
SQLAlchemy, TurboGears, web2py, Flask und Zope. Ferner gibt es einen Python-Interpreter für das Symbian-Betriebssystem,
so dass Python auf verschiedenen Mobiltelefonen verfügbar ist. In der Version 2.5.1 ist Python ein Bestandteil von
AmigaOS 4.0.  Bekannte kommerzielle Projekte, etwa Google Suche und YouTube, basieren in Teilen auf Python. Auch in der
Spieleindustrie findet die Sprache bisweilen Einsatz, etwa in EVE Online, World in Conflict und Civilization IV.  Python
wird gern in der Lehre eingesetzt, da Python auf der einen Seite einsteigerfreundlich ist, auf der anderen Seite aber
auch leistungsfähig und mächtig genug, um theoretische Grundlagen der Programmierung zu vermitteln und um moderne
Anwendungen bis hin zu komplexen Datenanalysen, grafischer Programmierung oder Datenbankanwendungen zu entwickeln.
Lehrbücher, die sich explizit an junge Menschen ohne Programmiererfahrung wenden, unterstützen und unterstreichen diese
Entwicklung.  Im Rahmen des Projektes 100-Dollar-Laptop wird Python als Standardsprache der Benutzeroberfläche
verwendet. Da der 100-Dollar-Rechner für die Schulausbildung von Kindern konzipiert ist, soll bei Benutzung der dafür
gestalteten grafischen Benutzeroberfläche „Sugar“ auf Knopfdruck der gerade laufende Python-Quellcode angezeigt werden.
Damit soll Kindern die Möglichkeit gegeben werden, die dahinter liegende Informationstechnik real zu erleben und nach
Belieben „hinter die Kulissen“ zu schauen.  Der Einplatinen-Computer Raspberry Pi (Python Interpreter) sollte
ursprünglich mit einem im ROM integrierten Python-Interpreter ausgeliefert werden. Auch heute ist Python eine der
bevorzugtesten Sprachen für den Raspberry Pi. Sein Standard-Betriebssystem Raspberry Pi OS kommt mit einer großen
Python-Bibliothek zur Ansteuerung der Hardware.  Python wird weltweit in der Informatikausbildung an Schulen und
Universitäten eingesetzt. So steht inzwischen eine Reihe von (kostenlosen) didaktisch konzipierten Online-
Lernplattformen zu Python für Schule und Selbststudium ab dem 6. Schuljahr zur Verfügung – meist in mehreren Sprachen.
Der Online-Kurs Computer Science Circles z. B. wird von der Universität Waterloo in Kanada bereitgestellt. Die deutsche
Version wird betrieben von den deutschen Bundesweiten Informatikwettbewerben. TigerJython, gehostet von der
Pädagogischen Hochschule Bern, wird vor allem in der Schweiz im Informatikunterricht eingesetzt.  In der
Wissenschaftsgemeinde genießt Python große Verbreitung, hauptsächlich wegen des einfachen Einstiegs in die
Programmierung und der großen Auswahl wissenschaftlicher Bibliotheken. Oft wird Python hier innerhalb eines Jupyter
Notebooks genutzt. Numerische Rechnungen und die visuelle Aufbereitung der Ergebnisse in Graphen werden meist mit NumPy
und der Matplotlib erledigt. Anaconda und SciPy bündeln viele wissenschaftliche Python-Bibliotheken und machen sie somit
einfacher zugänglich. Mit TensorFlow, Keras, Scikit-learn, PyTorch u. a. gibt es große Bibliotheken zur Forschung und
Nutzung von maschinellem Lernen und Deep Learning (Künstliche Intelligenz).  Die Unterstützung für Python 2 ist beendet.
Die letzte 2er-Version war die 2.7.18 vom 20. April 2020; seit diesem Datum wird Python 2 nicht mehr unterstützt. Es
gibt aber vielfältige und umfangreiche Dokumentationen zum Umstieg und auch Tools, die bei der Migration helfen oder es
ermöglichen, Code zu schreiben, der mit Python 2 und 3 funktioniert.  Bei der Definition von Methoden muss der Parameter
self, der der Instanz entspricht, deren Methode aufgerufen wird, explizit als Parameter angegeben werden. Dies wird von
Andrew Kuchling, Autor und langjähriger Python-Entwickler, als unelegant und nicht objektorientiert empfunden. Python-
Schöpfer van Rossum verweist hingegen darauf, dass es nötig sei, um bestimmte wichtige Konstrukte zu ermöglichen. Einer
der Python-Grundsätze lautet zudem „Explicit is better than implicit“.  Bis zur Version 3.0 wurde kritisiert, dass in
einer Methodendefinition der Aufruf der Basisklassenversion derselben Methode die explizite Angabe der Klasse und
Instanz erfordert. Dies wurde als Verletzung des DRY-Prinzips („Don’t repeat yourself“) gesehen; außerdem behinderte es
Umbenennungen. In Python 3.0 wurde dieser Kritikpunkt behoben.  Auf Multiprozessor-Systemen behindert der sogenannte
Global Interpreter Lock (GIL) von CPython die Effizienz von Python-Anwendungen, die softwareseitiges Multithreading
benutzen. Diese Beschränkung existiert unter Jython oder IronPython allerdings nicht. Bislang ist von offizieller Seite
nicht geplant, den GIL zu ersetzen. Stattdessen wird empfohlen, mehrere miteinander kommunizierende Prozesse anstelle
von Threads zu verwenden.  In den vorherrschenden Implementationen ist die Ausführungsgeschwindigkeit niedriger als bei
vielen kompilierbaren Sprachen, aber ähnlich wie bei Perl, PHP, Dart und Ruby. Das liegt zum Teil daran, dass bei der
Entwicklung von CPython der Klarheit des Codes gegenüber der Geschwindigkeit Vorrang eingeräumt wird. Man beruft sich
dabei auf Autoritäten wie Donald Knuth und Tony Hoare, die von verfrühter Optimierung abraten. Wenn
Geschwindigkeitsprobleme auftreten, die nicht durch Optimierung des Python-Codes gelöst werden können, werden
stattdessen JIT-Compiler wie PyPy verwendet oder zeitkritische Funktionen in maschinennähere Sprachen wie C oder Cython
ausgelagert.  Für den Einstieg  Referenzen  Weiterführendes  Dieser Artikel ist als Audiodatei verfügbar:  Mehr
Informationen zur gesprochenen Wikipedia

